id: https://w3id.org/linkml/examples/rules
title: Rules example
name: rules
description: This demonstrates the use of rules to be introduced in linkml 1.2
license: https://creativecommons.org/publicdomain/zero/1.0/
see_also:
  - https://github.com/orgs/linkml/projects/3
  - https://github.com/linkml/linkml/issues/75

prefixes:
  linkml: https://w3id.org/linkml/
  ex: https://w3id.org/linkml/examples/rules/
  skos: http://www.w3.org/2004/02/skos/core#
  pav: http://purl.org/pav/
  schema: http://schema.org/
  sh: https://w3id.org/shacl/

default_prefix: ex
default_range: string

default_curi_maps:
    - semweb_context

emit_prefixes:
  - linkml
  - rdf
  - rdfs
  - xsd
  - owl

imports:
  - linkml:types

#==================================
# Types                           #
#==================================
types:
  AlternativeEnum:
    typeof: uriorcurie
    exactly_one_of:
      - equals_string: schema:foo
      - equals_string: schema:bar
  

#==================================
# Slots                           #
#==================================
slots:
  id:
  name:
    range: string
  employer_name:
    range: string
  primary_address:
    range: Address
  street_address:
  country:
  postal_code:
  telephone:
  fiction_status:
  slot A:
  slot B:
  slot C:
  age:
    range: integer
  encodes:
    range: SeqFeature
  owns:
    range: Product
    multivalued: true
  manufactured_by:
    range: Organization
  
  analyte:
    required: true
    # union ranges: https://github.com/linkml/linkml/issues/215
    any_of:
      - range: MissingValueEnum
      - range: AnalyteEnum
  vital_status:
    required: true
    any_of:
      - range: MissingValueEnum
      - range: VitalStatusEnum
  familial_relationships:
    abstract: true
  parents:
    is_a: familial_relationships
    irreflexive: true
  ancestors:
    is_a: familial_relationships
    transitive_form_of: parents
  children:
    is_a: familial_relationships
    inverse: parents
  descendants:
    is_a: familial_relationships
    inverse: ancestors
    transitive_form_of: children
  resident_of:
    # remember to provide a range here, even though
    # it could be inferred from the any_of, good to be explicit
    range: uriorcurie
    # any_of is the same as exactly_one_of unless multivalued=true
    any_of:
      - equals_string: geonames:1
      - equals_string: geonames:2
  resident_of_using_classes:
    # remember to provide a range here, even though
    # it could be inferred from the any_of, good to be explicit
    range: CountryCode
    inlined: false ## not required but just for illustration
    # any_of is the same as exactly_one_of unless multivalued=true
    any_of:
      - equals_string: geonames:1
      - equals_string: geonames:2
  

    
#==================================
# Classes                         #
#==================================

classes:

  ControlledTerm:
    attributes:
      id:
        identifier: true
        range: uriorcurie
      label:
  CountryCode:
    is_a: ControlledTerm
  
  # https://json-schema.org/understanding-json-schema/reference/conditionals.html
  Address:
    slots:
      - street_address
      - country
    rules:
      - preconditions:
          slot_conditions:
            country:
              any_of:
                - equals_string: USA
                - equals_string: USA_territory
        postconditions:
          slot_conditions:
            postal_code:
              pattern: "[0-9]{5}(-[0-9]{4})?"
            telephone:
              pattern: "^\\+1 "

  SeqFeature:
    slots:
      - id
  Gene:
    is_a: SeqFeature
    slots:
      - encodes
  NoncodingGene:
    is_a: Gene
    classification_rules:
      - is_a: Gene
        slot_conditions:
          encodes:
            none_of:
              - range: Protein
  ProteinCodingGene:
    is_a: Gene
    classification_rules:
      - is_a: Gene
        slot_conditions:
          encodes:
            range: Protein
          
  Sample:
    slots:
      - id
      - analyte
  GenomicSample:
    is_a: Sample
    classification_rules:
      - is_a: Sample
        slot_conditions:
          analyte:
            equals_string: DNA

            
  Person:
    slots:
      - id
      - name
      - age
      - employer_name
      - vital_status
      - primary_address
      - fiction_status
      - parents
      - ancestors
      - children
      - descendants
      - owns
      - slot A
      - slot B
      - slot C
    rules:
      - postconditions:
          any_of:
            - slot_conditions:
                slot A:
                  required: true
            - slot_conditions:
                slot B:
                  required: true
            - slot_conditions:
                slot C:
                  required: true
        description: At least one of A, B, or C should be populated
      - preconditions:
          slot_conditions:
            age:
              maximum_value: 18
        postconditions:
          none_of:
            - slot_conditions:
                owns:
                  range_expression:
                    is_a: Car
        description: Only an adult can be owner of a car.
        #annotations:
        #  OCL: "context Person inv: self.age<18 implies self.cars->isEmpty()"
        see_also:
          - https://en.wikipedia.org/wiki/Object_Constraint_Language#Alternatives
          
      - postconditions:
          slot_conditions:
            fiction_status:
              equals_string: NOT_REAL
        preconditions:
          any_of:
            - slot_conditions:
                age:
                  minimum_value: 500
            - slot_conditions:
                vital_status:
                  equals_string: UNDEAD   ## forces eval using enum text
            - slot_conditions:
                primary_address:
                  range_expression:
                    slot_conditions:
                      country:
                        any_of:
                          - equals_string: Narnia
                          - equals_string: Lilliput
                            
      - postconditions:
          slot_conditions:
            employer_name:
              equals_expression: "employer/name"
              
      - postconditions:
          slot_conditions:
            ancestors:
              has_member:
                equals_expression: parent

  Organization:
    slots:
      - id
      - name
      
  Product:
    slots:
      - id
      - manufactured_by

  Car:
    is_a: Product

  Container:
    tree_root: true
    attributes:
      persons:
        range: Person
        multivalued: true
    rules:
      - postconditions:
          slot_conditions:
            persons:
              has_member:
                range_expression:
                  slot_conditions:
                    owns:
                      range_expression:
                        is_a: Car
        description: There is at least one Person which owns a car.
        #annotations:
        #  OCL: "context Person inv: Person.allInstances()->exists(p | p.cars->size() > 0)"
        
      
  FunctionalAnnotation:
    attributes:
      gene:
      relation:
      term:
      modifiers:
      evidence_type:
      references:
      term_ancestors:
      term_subsets:
    rules:
      - postconditions:
          none_of:
            - title: IPI should not be used with GO:0003824 catalytic activity or descendents
              see_also: [GORULE:0000007]
              #exact_mappings: [GORULE:0000007]
              all_of:
              - slot_conditions:
                  evidence_type:
                    equals_string: IPI
                  term_ancestors:
                    has_member:
                      equals_string: GO:0003824
            - title: No annotations should be made to uninformative high level terms
              see_also: [GORULE:0000008]
              any_of:
                - slot_conditions:
                    term_subsets:
                      has_member:
                        equals_string: gocheck_do_not_annotate
                - slot_conditions:
                    term_subsets:
                      has_member:
                        equals_string: gocheck_do_not_manually_annotate
                    evidence_type:
                      none_of:
                        - equals_string_in: [IEA, ISS, ISO, IBA]
            - title: ND evidence code should be to root nodes only, and no terms other than root nodes can have the evidence code ND
              see_also: [GORULE:0000011]
              slot_conditions:
                evidence_type:
                  equals_string: ND
                term:
                  none_of:
                    - equals_string_in: [GO:0008150, GO:0003674, GO:0005575]
            
                
#==================================
# Enums
#==================================

enums:
  AnalyteEnum:
    permissible_values:
      DNA:
      PROTEIN:
  MissingValueEnum:
    permissible_values:
      INAPPLICABLE:
      NOT_COLLECTED:
      RESTRICTED:
      OTHER:
  VitalStatusEnum:
    permissible_values:
      LIVING:
      DEAD:
      UNDEAD:
    
              
